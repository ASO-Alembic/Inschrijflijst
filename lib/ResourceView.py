from django import http
from django.utils.decorators import classonlymethod


class ResourceView:
	"""
	Simple Laravel-style RESTful resource controller/view base class.
	"""

	# 2d lookup table with pages and HTTP methods, returns name of handler method
	# a 'page' in this case is an unique URL pattern
	handler_method_names = {
		'index': {
			'get': 'index',
			'post': 'store'
		},
		'show': {
			'get': 'show',
			'put': 'update',
			'delete': 'destroy'
		},
		'create': {'get': 'create'},
		'edit': {'get': 'edit'}
	}

	@classonlymethod
	def as_view(cls, page):
		"""
		Define and return a function-based view depending on the page (provided as argument).
		"""

		def view(request, **kwargs):
			# Instantiate class
			self = cls()

			try:
				handler = getattr(self,	cls.handler_method_names[page][request.method.lower()])
			except KeyError:
				# If page/method doesn't exist, return 405 Method Not Allowed with the allowed methods for current page
				allowed_methods = cls.handler_method_names[page]
				handler = http.HttpResponseNotAllowed(allowed_methods)

			# Return Response generated by handler
			return handler(request, **kwargs)

		# Return ephemeral function-based view to URLconf
		return view

	# Handler methods, must be overridden in child class

	def index(self, request):
		raise NotImplementedError

	def store(self, request):
		raise NotImplementedError

	def show(self, request, pk):
		raise NotImplementedError

	def update(self, request, pk):
		raise NotImplementedError

	def destroy(self, request, pk):
		raise NotImplementedError

	def create(self, request):
		raise NotImplementedError

	def edit(self, request, pk):
		raise NotImplementedError
